
概念:
    ROS中同步通信方式,node之间可以通过request(请求)-replay(响应)的方式通信; 

关于rosservice的指令:
	rosservice args	print service arguments
	rosservice call	call the service with the provided args
	rosservice find	find services by service type
	rosservice info	print information about service
	rosservice list	list active services
	rosservice type	print service type
	rosservice uri	print service ROSRPC uri

    rosservice args 打印service参数
	rosservice call	通过提供的参数调用service
	rosservice find	通过service类型查找service
	rosservice info	打印关于service的信息
	rosservice list	列出有效的service
	rosservice type	打印service类型
	rosservice uri	打印service的ROSRPC uri


关键属性:
 1) 同步通信;
 2) Request-Replay;

srv:
    Service通信的数据格式,定义在*.srv文件中;
    stv文件必须要放在package/srv/目录下;

常用rossrv指令:
    rossrv show	显示srv描述
	rossrv list	列出所有的srv

创建srv:
1. 在package下创建srv目录,并在该目录下创建*.srv文件;
2. 在package.xml中加入:
    <build_depend>message_generation</build_depend>
    <exec_depend>message_runtime</exec_depend>
3. 在CMakeList.txt中加入:
    添加依赖:
        find_package(... message_generation)
    添加运行时依赖: 
        catkin_package(... CATKIN_DEPENDS message_runtime)
    生成消息:
        add_service_files(FILES *.srv)
        generate_messages()

生成的msg的头文件在~/catkin_ws/devel/include下;


Topic与Service比较
    通信方式:
        Topic   异步通信
        Service 同步通信
    实现原理:
        Topic   TCP/IP
        Service TCP/IP
    通信模型:
        Topic   Publish-Subscribe   多对多,接收者接受到数据会会回调(callback)
        Service Request-Replay      多对一,"远程过程调用"(RPC),客户端调用服务器端的服务
    应用场景:
        Topic   连续、高频的数据发布
        Service 偶尔调用的功能,或者某些具体的任务
